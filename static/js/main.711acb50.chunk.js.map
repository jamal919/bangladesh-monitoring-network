{"version":3,"sources":["images/level.svg","images/oceantide.svg","App.js","reportWebVitals.js","index.js"],"names":["App","icon_level","icon","iconUrl","marker_level","iconSize","icon_tide","marker_oceantide","className","MapContainer","center","zoom","scrollWheelZoom","minZoom","maxZoom","style","width","height","LayersControl","position","BaseLayer","checked","name","TileLayer","attribution","url","Overlay","LayerGroup","bwdb","features","map","station","Marker","geometry","coordinates","Popup","properties","location","x","y","biwta","StationName","Longitude","Latitude","Authority","ScaleControl","metric","imperial","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"60uCAAe,MAA0B,kCCA1B,MAA0B,sC,OCiB1B,SAASA,IACtB,IAEMC,EAAaC,eAAK,CACtBC,QAASC,EACTC,SAAU,CAAC,GAAI,MAGXC,EAAYJ,eAAK,CACrBC,QAASI,EACTF,SAAU,CAAC,GAAI,MAGjB,OACE,qBAAKG,UAAU,gBAAf,SACE,eAACC,EAAA,EAAD,CACEC,OAfW,CAAC,GAAI,IAgBhBC,KAAM,EACNC,iBAAiB,EACjBC,QAAS,EACTC,QAAS,GACTC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SANnC,UAQE,eAACC,EAAA,EAAD,CAAeC,SAAS,WAAxB,UACE,cAACD,EAAA,EAAcE,UAAf,CAAyBC,SAAO,EAACC,KAAK,iBAAtC,SACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,yDAIR,cAACP,EAAA,EAAcE,UAAf,CAAyBE,KAAK,wBAA9B,SACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,0DAIR,cAACP,EAAA,EAAcE,UAAf,CAAyBE,KAAK,iBAA9B,SACE,cAACC,EAAA,EAAD,CACEC,YAAY,6IACZC,IAAI,oGAIR,cAACP,EAAA,EAAcQ,QAAf,CAAuBL,SAAO,EAACC,KAAK,OAApC,SACE,cAACK,EAAA,EAAD,UACGC,EAAKC,SAASC,KAAI,SAACC,GAAD,OACjB,cAACC,EAAA,EAAD,CACEb,SAAU,CACRY,EAAQE,SAASC,YAAY,GAC7BH,EAAQE,SAASC,YAAY,IAE/BhC,KAAMD,EALR,SAOE,eAACkC,EAAA,EAAD,4BACiBJ,EAAQK,WAAWC,SADpC,IAC8C,uBAD9C,cAEcN,EAAQK,WAAWE,EAFjC,IAEoC,uBAFpC,aAGaP,EAAQK,WAAWG,EAHhC,IAGmC,mCAO3C,cAACrB,EAAA,EAAcQ,QAAf,CAAuBL,SAAO,EAACC,KAAK,QAApC,SACE,cAACK,EAAA,EAAD,UACGa,EAAMX,SAASC,KAAI,SAACC,GAAD,OAClB,cAACC,EAAA,EAAD,CACEb,SAAU,CACRY,EAAQE,SAASC,YAAY,GAC7BH,EAAQE,SAASC,YAAY,IAE/BhC,KAAMI,EALR,SAOE,eAAC6B,EAAA,EAAD,4BACiBJ,EAAQK,WAAWK,YADpC,IACiD,uBADjD,cAEcV,EAAQK,WAAWM,UAFjC,IAE4C,uBAF5C,aAGaX,EAAQK,WAAWO,SAHhC,IAG0C,uBAH1C,cAIcZ,EAAQK,WAAWQ,UAJjC,IAI4C,sCAQtD,cAACC,EAAA,EAAD,CACE1B,SAAS,cACT2B,QAAQ,EACRC,UAAU,EACVC,SAAU,WC5GpB,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC5D,EAAD,MAEF6D,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.711acb50.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/level.610b15a1.svg\";","export default __webpack_public_path__ + \"static/media/oceantide.ea160cf0.svg\";","import React from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  LayersControl,\n  ScaleControl,\n  Marker,\n  LayerGroup,\n  Popup,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport bwdb from \"./data/stations/bwdb.json\";\nimport biwta from \"./data/stations/biwta.json\";\nimport { icon } from \"leaflet\";\nimport marker_level from \"./images/level.svg\";\nimport marker_oceantide from \"./images/oceantide.svg\";\n\nexport default function App() {\n  const position = [24, 90];\n\n  const icon_level = icon({\n    iconUrl: marker_level,\n    iconSize: [24, 24],\n  });\n\n  const icon_tide = icon({\n    iconUrl: marker_oceantide,\n    iconSize: [24, 24],\n  });\n\n  return (\n    <div className=\"map_container\">\n      <MapContainer\n        center={position}\n        zoom={7}\n        scrollWheelZoom={true}\n        minZoom={5}\n        maxZoom={16}\n        style={{ width: \"100vw\", height: \"100vh\" }}\n      >\n        <LayersControl position=\"topright\">\n          <LayersControl.BaseLayer checked name=\"OSM - Standard\">\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n\n          <LayersControl.BaseLayer name=\"OSM - Black and White\">\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n\n          <LayersControl.BaseLayer name=\"ESRI Satellite\">\n            <TileLayer\n              attribution=\"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\"\n              url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n            />\n          </LayersControl.BaseLayer>\n\n          <LayersControl.Overlay checked name=\"BWDB\">\n            <LayerGroup>\n              {bwdb.features.map((station) => (\n                <Marker\n                  position={[\n                    station.geometry.coordinates[1],\n                    station.geometry.coordinates[0],\n                  ]}\n                  icon={icon_level}\n                >\n                  <Popup>\n                    Station Name: {station.properties.location} <br />\n                    Longitude: {station.properties.x} <br />\n                    Latitude: {station.properties.y} <br />\n                  </Popup>\n                </Marker>\n              ))}\n            </LayerGroup>\n          </LayersControl.Overlay>\n\n          <LayersControl.Overlay checked name=\"BIWTA\">\n            <LayerGroup>\n              {biwta.features.map((station) => (\n                <Marker\n                  position={[\n                    station.geometry.coordinates[1],\n                    station.geometry.coordinates[0],\n                  ]}\n                  icon={icon_tide}\n                >\n                  <Popup>\n                    Station Name: {station.properties.StationName} <br />\n                    Longitude: {station.properties.Longitude} <br />\n                    Latitude: {station.properties.Latitude} <br />\n                    Authority: {station.properties.Authority} <br />\n                  </Popup>\n                </Marker>\n              ))}\n            </LayerGroup>\n          </LayersControl.Overlay>\n        </LayersControl>\n\n        <ScaleControl\n          position=\"bottomright\"\n          metric={true}\n          imperial={true}\n          maxWidth={200}\n        ></ScaleControl>\n      </MapContainer>\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}