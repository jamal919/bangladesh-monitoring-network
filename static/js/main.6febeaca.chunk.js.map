{"version":3,"sources":["components/Graph.js","images/level.svg","images/oceantide.svg","App.js","reportWebVitals.js","index.js"],"names":["darkenColor","colorStr","color","Dygraph","toRGB_","r","Math","floor","g","b","barChartPlotter","e","ctx","drawingContext","points","y_bottom","dygraph","toDomYCoord","fillStyle","min_sep","Infinity","i","length","sep","canvasx","bar_width","p","center_x","fillRect","canvasy","strokeRect","DyGraph","props","graphRef","useRef","useEffect","current","url","title","titleHeight","ylabel","xlabel","gridLineWidth","width","height","valueRange","legend","plotter","ref","App","icon_level","icon","iconUrl","marker_level","iconSize","icon_tide","marker_oceantide","className","MapContainer","id","center","zoom","scrollWheelZoom","minZoom","maxZoom","LayersControl","position","BaseLayer","checked","name","TileLayer","attribution","Overlay","LayerGroup","bwdb","features","map","station","Marker","geometry","coordinates","Popup","properties","location","x","y","biwta","maxWidth","StationName","Longitude","Latitude","Authority","databaseURL","ScaleControl","metric","imperial","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6febeaca.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Dygraph from \"dygraphs\";\nimport \"dygraphs/dist/dygraph.min.css\";\n\n// From https://dygraphs.com/tests/plotters.html\n\n// Darken a color\nfunction darkenColor(colorStr) {\n  // Defined in dygraph-utils.js\n  var color = Dygraph.toRGB_(colorStr);\n  color.r = Math.floor((255 + color.r) / 2);\n  color.g = Math.floor((255 + color.g) / 2);\n  color.b = Math.floor((255 + color.b) / 2);\n  return \"rgb(\" + color.r + \",\" + color.g + \",\" + color.b + \")\";\n}\n\n// This function draws bars for a single series. See\n// multiColumnBarPlotter below for a plotter which can draw multi-series\n// bar charts.\nfunction barChartPlotter(e) {\n  var ctx = e.drawingContext;\n  var points = e.points;\n  var y_bottom = e.dygraph.toDomYCoord(0);\n\n  ctx.fillStyle = darkenColor(e.color);\n\n  // Find the minimum separation between x-values.\n  // This determines the bar width.\n  var min_sep = Infinity;\n  for (var i = 1; i < points.length; i++) {\n    var sep = points[i].canvasx - points[i - 1].canvasx;\n    if (sep < min_sep) min_sep = sep;\n  }\n  var bar_width = Math.floor((2.0 / 3) * min_sep);\n\n  // Do the actual plotting.\n  for (i = 0; i < points.length; i++) {\n    var p = points[i];\n    var center_x = p.canvasx;\n\n    ctx.fillRect(\n      center_x - bar_width / 2,\n      p.canvasy,\n      bar_width,\n      y_bottom - p.canvasy\n    );\n    ctx.strokeRect(\n      center_x - bar_width / 2,\n      p.canvasy,\n      bar_width,\n      y_bottom - p.canvasy\n    );\n  }\n}\n\n// Multiple column bar chart\nfunction barChartPlotterMulti(e) {\n  // We need to handle all the series simultaneously.\n  if (e.seriesIndex !== 0) return;\n\n  var g = e.dygraph;\n  var ctx = e.drawingContext;\n  var sets = e.allSeriesPoints;\n  var y_bottom = e.dygraph.toDomYCoord(0);\n\n  // Find the minimum separation between x-values.\n  // This determines the bar width.\n  var min_sep = Infinity;\n  for (var j = 0; j < sets.length; j++) {\n    var points = sets[j];\n    for (var i = 1; i < points.length; i++) {\n      var sep = points[i].canvasx - points[i - 1].canvasx;\n      if (sep < min_sep) min_sep = sep;\n    }\n  }\n  var bar_width = Math.floor((2.0 / 3) * min_sep);\n\n  var fillColors = [];\n  var strokeColors = g.getColors();\n  for (i = 0; i < strokeColors.length; i++) {\n    fillColors.push(darkenColor(strokeColors[i]));\n  }\n\n  for (j = 0; j < sets.length; j++) {\n    ctx.fillStyle = fillColors[j];\n    ctx.strokeStyle = strokeColors[j];\n    for (i = 0; i < sets[j].length; i++) {\n      var p = sets[j][i];\n      var center_x = p.canvasx;\n      var x_left = center_x - (bar_width / 2) * (1 - j / (sets.length - 1));\n\n      ctx.fillRect(\n        x_left,\n        p.canvasy,\n        bar_width / sets.length,\n        y_bottom - p.canvasy\n      );\n\n      ctx.strokeRect(\n        x_left,\n        p.canvasy,\n        bar_width / sets.length,\n        y_bottom - p.canvasy\n      );\n    }\n  }\n}\n\nfunction DyGraph(props) {\n  const graphRef = useRef();\n\n  useEffect(() => {\n    new Dygraph(\n      graphRef.current,\n      props.url,\n      {\n        title: props.title,\n        titleHeight: 28,\n        ylabel: \"Percent\",\n        xlabel: \"Year\",\n        gridLineWidth: \"0.1\",\n        width: 700,\n        height: 300,\n        valueRange: [0, 101],\n        legend: \"always\",\n        plotter: barChartPlotter,\n      }\n    );\n  });\n\n  return <div ref={graphRef}></div>;\n}\n\nexport default DyGraph;\n","export default __webpack_public_path__ + \"static/media/level.610b15a1.svg\";","export default __webpack_public_path__ + \"static/media/oceantide.ea160cf0.svg\";","import React from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  LayersControl,\n  ScaleControl,\n  Marker,\n  LayerGroup,\n  Popup,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport bwdb from \"./data/stations/bwdb.json\";\nimport biwta from \"./data/stations/biwta.json\";\nimport { icon } from \"leaflet\";\nimport DyGraph from \"./components/Graph.js\";\nimport marker_level from \"./images/level.svg\";\nimport marker_oceantide from \"./images/oceantide.svg\";\n\n// Check if an url exists\nasync function exists(url) {\n  const result = await fetch(url, { method: 'HEAD' });\n  return result.ok;\n}\n\n// The main application\nexport default function App() {\n  const position = [24, 90];\n  const databaseURL = \"https://raw.githubusercontent.com/jamal919/bangladesh-monitoring-network/master/database/\";\n\n  const icon_level = icon({\n    iconUrl: marker_level,\n    iconSize: [24, 24],\n  });\n\n  const icon_tide = icon({\n    iconUrl: marker_oceantide,\n    iconSize: [24, 24],\n  });\n\n  return (\n    <div className=\"map_container\">\n      <MapContainer\n        id=\"map\"\n        center={position}\n        zoom={7}\n        scrollWheelZoom={true}\n        minZoom={5}\n        maxZoom={16}\n      >\n        <LayersControl position=\"topright\">\n          <LayersControl.BaseLayer checked name=\"OSM - Standard\">\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n\n          <LayersControl.BaseLayer name=\"OSM - Black and White\">\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n\n          <LayersControl.BaseLayer name=\"ESRI Satellite\">\n            <TileLayer\n              attribution=\"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\"\n              url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n            />\n          </LayersControl.BaseLayer>\n\n          <LayersControl.Overlay checked name=\"BWDB\">\n            <LayerGroup>\n              {bwdb.features.map((station) => (\n                <Marker\n                  position={[\n                    station.geometry.coordinates[1],\n                    station.geometry.coordinates[0],\n                  ]}\n                  icon={icon_level}\n                >\n                  <Popup>\n                    Station Name: {station.properties.location} <br />\n                    Longitude: {station.properties.x} <br />\n                    Latitude: {station.properties.y} <br />\n                  </Popup>\n                </Marker>\n              ))}\n            </LayerGroup>\n          </LayersControl.Overlay>\n\n          <LayersControl.Overlay checked name=\"BIWTA\">\n            <LayerGroup>\n              {biwta.features.map((station) => (\n                <Marker\n                  position={[\n                    station.geometry.coordinates[1],\n                    station.geometry.coordinates[0],\n                  ]}\n                  icon={icon_tide}\n                >\n                  <Popup maxWidth={700}>\n                    Station Name: {station.properties.StationName} <br />\n                    Longitude: {station.properties.Longitude} <br />\n                    Latitude: {station.properties.Latitude} <br />\n                    Authority: {station.properties.Authority} <br />\n                    <DyGraph\n                      url={databaseURL + \"biwta/\" + station.properties.StationName + \".csv\"}\n                      title={station.properties.StationName}\n                    ></DyGraph>\n                  </Popup>\n                </Marker>\n              ))}\n            </LayerGroup>\n          </LayersControl.Overlay>\n        </LayersControl>\n\n        <ScaleControl\n          position=\"bottomright\"\n          metric={true}\n          imperial={true}\n          maxWidth={200}\n        ></ScaleControl>\n      </MapContainer>\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}